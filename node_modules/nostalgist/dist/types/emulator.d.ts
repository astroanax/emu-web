import { type EmscriptenFS } from 'browserfs';
import type { EmulatorOptions } from './types/emulator-options';
import type { RetroArchCommand } from './types/retroarch-command';
import type { RetroArchEmscriptenModule } from './types/retroarch-emscripten';
interface EmulatorEmscripten {
    Module: RetroArchEmscriptenModule;
    exit: (code: number) => void;
    JSEvents: any;
}
export declare class Emulator {
    emscripten: EmulatorEmscripten | undefined;
    browserFS: EmscriptenFS | undefined;
    private options;
    private messageQueue;
    private gameStatus;
    private canvasInitialSize;
    constructor(options: EmulatorOptions);
    private get romBaseName();
    private get stateFileDirectory();
    private get stateFileName();
    private get stateThumbnailFileName();
    getOptions(): EmulatorOptions;
    launch(): Promise<void>;
    sendCommand(msg: RetroArchCommand): void;
    resume(): void;
    restart(): void;
    pause(): void;
    getEmscripten(): EmulatorEmscripten;
    saveState(): Promise<{
        state: Blob;
        thumbnail: Blob | undefined;
    }>;
    loadState(blob: Blob): Promise<void>;
    exit(statusCode?: number): void;
    resize({ width, height }: {
        width: number;
        height: number;
    }): void;
    pressDown(button: string, player?: number): void;
    pressUp(button: string, player?: number): void;
    press(button: string, player?: number, time?: number): Promise<void>;
    screenshot(): Promise<Blob>;
    private getElementSize;
    private writeBlobToDirectory;
    private writeTextToDirectory;
    private setupFileSystem;
    private setupEmscripten;
    private stdin;
    private writeConfigFile;
    private setupRaConfigFile;
    private setupRaShaderFile;
    private runMain;
    private postRun;
    private fireGamepadEvents;
    private updateKeyboardEventHandlers;
    private waitForEmscriptenFile;
    private clearStateFile;
    private getCurrentRetroarchConfig;
    private fireKeyboardEvent;
    private getKeyboardCode;
    private keyboardUp;
    private keyboardDown;
    private keyboardPress;
    private guessScreenshotFileName;
    private checkIsAborted;
}
export {};
